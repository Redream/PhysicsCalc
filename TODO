# TEMPLATE

def template(v0c=82.0, vfc=15.1, xc=350):
    """
    brief:
    from:     WebAssign Homework 3.1
    category:
    types:
    """

    print('-' * 30)
    print('
    print('
    print('
    print('
    ')
    {:{}} {}

    .format(a[1], a[4], a[3]))
    .format(a[1], a[4], a[3], b[1], b[4], b[3]))
    .format(a[1], a[4], a[3], b[1], b[4], b[3], c[1], c[4], c[3]))
    .format(a[1], a[4], a[3], b[1], b[4], b[3], c[1], c[4], c[3], d[1], d[4], d[3]))

    print('░ question a ░')
    print('░ question b ░')
    print('░ question c ░')

    # solve acceleration: a = Δv / t'
    print_mechanics_motion1(a, vf, v0, a, t)
    # solve acceleration: a = v² - v₀² / 2Δx'
    print_mechanics_motion4(a, vf, v0, a, x)

    # solve time: t = Δv / a
    print_mechanics_motion1(t, vf, v0, a, t)
    # solve time: t = ∑v / 2a'
    print_mechanics_motion2(t, x, v0, vf, t)

    # solve last velocity: v₀ = Δx - ½at² / t
    print_mechanics_motion3(v0, x0, v0, t0, g)
    # solve final velocity: v² = v₀² + 2aΔx
    print_mechanics_motion4(vf, vf, v0, g, x0)

    # solve distance: Δx = ∑v*t / 2'
    print_mechanics_motion2(x, x, v0, vf, t)
    # solve distance: Δx = Δv / 2a
    print_mechanics_motion4(x, vf, v0, g, x)
    # rearrange to solve start height: Δx = (v² - v₀²) / 2a
    print_mechanics_motion4(xi, vf, vi, g, xi)
    # solve distance: Δx = v₀t + ½at
    print_mechanics_motion3(x, x, v0, t, a)

    # F = ma
    print_maths_evaluate('*', F, m, a)
    # solve momentum: p = mv
    print_maths_evaluate('*', p, m, v)
    # force: F = Δp/Δt
    print_maths_evaluate('/', xF, p, t)

    # change in kinetic energy: KE = ½mv²
    print_kinectic_energy(KE, KE, m, v)
    # solve force: F = W/d
    print_work_done(F, KE, F, xd)

    print('velocity: x direction travelling y angle: sin=opp/hyp : v * sin(θ)')
    print_maths_evaluate('*', v, v, math.sin(to_radians(O[1])))
    print('initial momentum: : p = m * v')
    print_maths_evaluate('*', pi, m, v)
    print('final momentum, velocity vector reversed direction: : p = m * -v')
    print_maths_evaluate('*', pf, m, v[1] * -1)
    print('change in momentum: Δp = pf - pi')
    print_maths_evaluate('-', p, pf, pi)
    print('force: F = Δp/Δt')
    print_maths_evaluate('/', xF, p, t)

    print('initial momentum: : p₀ = m1 * v₀')
    print_maths_evaluate('*', p0, m1, v0)
    print('final momentum: : pf = m1 * vf')
    print_maths_evaluate('*', pf, m1, vf)
    print('change in momentum: Δp = pf - p₀')
    print_maths_evaluate('-', p, pf, p0)

    # solve velocity: Δv = J/m = Δp/t
    print_impulse(v, p, v, m2)
    # solve velocity: Δv = J/m
    print_impulse(v, J, v, m)




    print('convert m to mm: x / 1000')
    print_maths_evaluate('/', xd, xd, 1000)











Clean up the code to follow the physics book and reference it
Serway Vuille College Physics

extra bonuses
 - need to look up symbols, eg if equation looks for 'a' ask array where 'a' is
 - need to do SI unit conversion, eg m/s <> km/h
 - need to apply correct calculations if type is vector/scalar + determine direction

I propose to restructure the code into types
Eg kinematics, dynamics, work&energy&power&elasticity etc
From the menu driven, we can select from either
webassign, past year exam questions, of types.

Eg
1. webassign
    -> chose a week
        -> chose a question

        eg week 1 question 4
        a car falls at rate of x to y direction (must have specific numbers, but ask to change)
        you can select input variables

        after calculations are complete, return to previous menu

2. type
    -> chose a type
        -> kinematic
              rocket up ()
              a rocket is launched from y0 at etc
              select input variables

3. past year exams